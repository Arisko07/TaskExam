
h1 Documentation
p Yote uses Jade and Sass, respectively, for markup and styling. The examples you see in this documentation will use syntax from these compiling languages. If you are unfamiliar with Jade or Sass, but know HTML and CSS, we think you'll like learning about them. Check out their documentation here and here.

hr

section.colors
  h2 Color
  p A default set of color variables and palettes come out of the box with Yote. You can manipulate these colors and their variable names in the
    code  _colors.scss
    |  file in the
    code  sass/globals
    |  directory. The white, black, and grey scales can be found in the
    code  _colorPalettes.scss
    |  file in the same directory. These are meant to be there for your convenience. In the UI Palette you'll find that variables already exist for an application level
    code  $grey
    |  and
    code  $white
    |  color.

  h3 Brand Palette
  .brand(yt-row)
    .primary(yt-col) $brand-primary
    .secondary(yt-col) $brand-secondary
    .accent(yt-col) $brand-accent

  h3 UI Palette
  .text-color
    h4 $text-color | Grumpy wizards make toxic brew for the evil Queen and Jack.
    h4.accent $accent-color | Grumpy wizards make toxic brew for the evil Queen and Jack.
  .link-color(yt-row)
    p(yt-col) $link-color
    p.hover(yt-col) $link-hover-color
    p.visited(yt-col) $link-visited-color

  h3 Semantic Palette
  .semantic(yt-row)
    .success(yt-col) $success
    .warning(yt-col) $warning
    .danger(yt-col) $danger

  h3 Scales
  .whites(yt-row)
   .one(yt-col) $white-1
   .two(yt-col) $white-2
   .three(yt-col) $white-3
   .four(yt-col) $white-4
   .five(yt-col) $white-5
   .six(yt-col) $white-6

  .greys(yt-row)
   .one(yt-col) $grey-1
   .two(yt-col) $grey-2
   .three(yt-col) $grey-3
   .four(yt-col) $grey-4
   .five(yt-col) $grey-5
   .six(yt-col) $grey-6
   .seven(yt-col) $grey-7
   .eight(yt-col) $grey-8
   .nine(yt-col) $grey-9

  .blacks(yt-row)
   .one(yt-col) $black-1
   .two(yt-col) $black-2
   .three(yt-col) $black-3
   .four(yt-col) $black-4
   .five(yt-col) $black-5
   .six(yt-col) $black-6


hr

section.typography
  h2 Typography
  p Yote uses mixins and sass variables to dictate type face, font size, line height, and letter spacing. Using these mixins throughout your custom styles makes it easier to maintain consistent type treatment for simlar content types. Additionally, making application wide changes to your type treatment becomes really simple.

  h3 Typeface
  p You can set your typeface(s) as Sass variables in the
    code  _typography.scss
    |  file. By default there are two variables already in place:
    code  $font-sans
    |  and
    code  $font-serif
    | . For example, the
    code  _typography.scss
    |  file for this documentation is shown below, with Helvetica being the preferred default sans-serif font, and Georgia the serif:

  code.block
    | 1 // Typography
    br
    | 2 // ••••••••••••••••••••••••••••••••••••••••••••••••••
    br
    | 3
    br
    | 4 $font-sans: Helvetica, "Lucida Grand", Arial, sans-serif;
    br
    | 5 $font-serif: Georgia, Times, serif;
    br
    | 6

  p With these variables set, you can now call them on selectors or classes in your page specific Sass files. For example:

  code.block
    | 1 p { font-family: $font-serif };
    br
    | 2

  h3 Type Treatment

  p Yote comes with predefined Sass mixins for font sizing, line height, and letter spacing.

  .typeTogglers(yt-row)
    .toggler(yt-col)
      label Font Size
      select(ng-model="theFontSize" ng-options="fontSize.name for fontSize in fontSizes")
    .toggler(yt-col)
      label Line Height
      select(ng-model="theLineHeight" ng-options="lineHeight.name for lineHeight in lineHeights")
    .toggler(yt-col)
      label Letter Spacing
      select(ng-model="theLetterSpacing" ng-options="letterSpacing.name for letterSpacing in letterSpacings")

  h4 Browser Output:
  p.demoText(ng-style="fontSize={'font-size':theFontSize.value, 'line-height':theLineHeight.value, 'letter-spacing':theLetterSpacing.value}") My money's in that office, right? If she start giving me some bullshit about it ain't there, and we got to go someplace else and get it, I'm gonna shoot you in the head then and there. Then I'm gonna shoot that bitch in the kneecaps, find out where my goddamn money is. She gonna tell me too. Hey, look at me when I'm talking to you, motherfucker. You listen: we go in there, and that nigga Winston or anybody else is in there, you the first motherfucker to get shot. You understand?

  h4 Sass Input:
  code.block
    | 1 .yourText {
    br
    | 2 @include type-{{theFontSize.name}}
    br
    | 3 @include lineHeight-{{theLineHeight.name}}
    br
    | 4 @include letterSpacing-{{theLetterSpacing.name}}
    br
    | 5 }


  h3 Defaults
  p This is what the default selectors look like in Yote. You can change them in blah blah blah files if you want to.
  h1 This is what an h1 tag looks like
  h2 This is what an h2 tag looks like
  h3 This is what an h3 tag looks like
  h4 This is what an h4 tag looks like
  p This is paragraph text

hr

section.grid
  h2 Grid Samples

  .example-content
    p yt-row
    .row-sample(yt-row)
      .grid-sample(yt-col)
        p yt-col
        .card
          p card

      .grid-sample(yt-col)
        p yt-col
        .card
          p card

      .grid-sample(yt-col)
        p yt-col
        .card
          p card
    p yt-row
    .row-sample(yt-row)
      .grid-sample(yt-col)
        p yt-col
        .card
          p card

      .grid-sample(yt-col)
        p yt-col

        p yt-row
        .row-sample(yt-row)
          .grid-sample(yt-col)
            p yt-col
            .card
              p card

          .grid-sample(yt-col)
            p yt-col
            .card
              p card

    //- .row-sample(yt-row)
    //-   .grid-sample(yt-col="1/6 1/6m ")
    //-     .card
    //-       p yt-col="1/3 5/6m 1/12l"

    //-   .grid-sample(yt-col="1/3 1/6m ")
    //-     .card
    //-       p yt-col="2/23 5/6m 1/12l"

    //-   .grid-sample(yt-col="1/13 1/6m ")
    //-     .card
    //-       p yt-col="7/13 5/6m 1/12l"

    //-   .grid-sample(yt-col="1/24 2/10m")
    //-     .card
    //-       p yt-col="1/24 5/6m 1/12l"

    //-   .grid-sample(yt-col="1/4 2/10m ", yt-offset="1/20")
    //-     .card
    //-       p yt-col="4/11 5/6m 1/12l"

hr

section.buttons
  h2 Buttons
  p You can use attribute selector syntax to access Yote's default button styles. For example,
    code  button(yt-btn)
    |  will give you the default Yote button styling. The text that appears under each example below is what should be passed to the button as attributes to acheive that style. The default button color is set as the
    code  $link-color
    |  defined in the
    code  sass/globals/_colors.scss
    |  file.
  .normal(yt-row)
    div(yt-col)
      button(yt-btn="x-small") Click Me
      p yt-btn="x-small"
    div(yt-col)
      button(yt-btn="small") Click Me
      p yt-btn="small"
    div(yt-col)
      button(yt-btn) Click Me
      p yt-btn
    div(yt-col)
      button(yt-btn="large") Click Me
      p yt-btn="large"
    div(yt-col)
      button(yt-btn="x-large") Click Me
      p yt-btn="x-large"

  .semantic(yt-row)
    div(yt-col)
      button(yt-btn, disabled) Click Me
      p yt-btn, disabled

    div(yt-col)
      button(yt-btn="success") Click Me
      p yt-btn="success"

    div(yt-col)
      button(yt-btn="warning") Click Me
      p yt-btn="warning"

    div(yt-col)
      button(yt-btn="danger") Click Me
      p yt-btn="danger"

    div(yt-col)
      button(yt-btn="dark") Click Me
      p yt-btn="dark"

  div
    button(yt-btn="block") Click Me
    p yt-btn="block"


hr

section.forms
  h2 Forms

  .formExample(yt-row)


    .codeExample(yt-col="1/2")
      h4 Jade Input
      code.block
        | .formContainer(yt-col="1/2")
        br
        |   form
        br
        |     .input-group
        |       label username
        |       input(type="text")
        |
        |     .input-group
        |       label password
        |       input(type="password")
        |
        |     .input-group
        |       label description
        |       textarea


    .rendered(yt-col="1/2")
      h4 Rendered HTML
      .formContainer
        form
          h2 Form Title
          .input-group
            label form label
            input(type="text", placeholder="text input").color-input

          .input-group
            label form label
            input(type="password", placeholder="password input")

          .input-group
            label Select One...
            select
              option One
              option Two
              option Three
              option Four

          .input-group
            label form label
            textarea(placeholder="this is a textarea...")

          .input-group
            label One or the other
            input(type="radio", name="options", value="option1", id="option1")
            label(for="option1") First Option
            input(type="radio", name="options", value="option2", id="option2")
            label(for="option2") Second Option

          .input-group
            label Choose two
            input(type="checkbox", name="choices", value="choice1", id="choice1")
            label(for="choice1") First Choice
            input(type="checkbox", name="choices", value="choice2", id="choice2")
            label(for="choice2") Second Choice
            input(type="checkbox", name="choices", value="choice3", id="choice3")
            label(for="choice3") Third Choice

          button(yt-col="1/3") Submit



hr



